// Mocks generated by Mockito 5.4.5 from annotations
// in tanzaku_todo/test/src/notion/tasks/task_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:tanzaku_todo/src/notion/api/notion_database_api.dart' as _i8;
import 'package:tanzaku_todo/src/notion/api/notion_task_api.dart' as _i3;
import 'package:tanzaku_todo/src/notion/common/filter_type.dart' as _i6;
import 'package:tanzaku_todo/src/notion/model/task.dart' as _i7;
import 'package:tanzaku_todo/src/notion/model/task_database.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskDatabase_0 extends _i1.SmartFake implements _i2.TaskDatabase {
  _FakeTaskDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotionTaskApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotionTaskApi extends _i1.Mock implements _i3.NotionTaskApi {
  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
      ) as String);

  @override
  _i2.TaskDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeTaskDatabase_0(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeTaskDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.TaskDatabase);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> loadShowCompleted() => (super.noSuchMethod(
        Invocation.method(
          #loadShowCompleted,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> saveShowCompleted(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #saveShowCompleted,
          [value],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<dynamic> fetchPages(
    _i6.FilterType? filterType,
    bool? hasCompleted, {
    String? startCursor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPages,
          [
            filterType,
            hasCompleted,
          ],
          {#startCursor: startCursor},
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> addTask(_i7.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> updateTask(_i7.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> updateCompleteStatus(
    String? taskId,
    bool? isCompleted,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCompleteStatus,
          [
            taskId,
            isCompleted,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> updateInProgressStatus(
    String? taskId,
    bool? isInProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInProgressStatus,
          [
            taskId,
            isInProgress,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> revertTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #revertTask,
          [taskId],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [NotionDatabaseApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotionDatabaseApi extends _i1.Mock implements _i8.NotionDatabaseApi {
  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
      ) as String);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> fetchAccessibleDatabases() => (super.noSuchMethod(
        Invocation.method(
          #fetchAccessibleDatabases,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> fetchDatabaseById(String? databaseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDatabaseById,
          [databaseId],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<List<Map<String, dynamic>>> fetchDatabasePagesById(
          String? databaseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDatabasePagesById,
          [databaseId],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<dynamic> createProperty(
    String? databaseId,
    _i8.CreatePropertyType? type,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProperty,
          [
            databaseId,
            type,
            name,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> fetchPageById(String? pageId) => (super.noSuchMethod(
        Invocation.method(
          #fetchPageById,
          [pageId],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<List<Map<String, dynamic>>> fetchPagesByIds(
          List<String>? pageIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPagesByIds,
          [pageIds],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);
}
