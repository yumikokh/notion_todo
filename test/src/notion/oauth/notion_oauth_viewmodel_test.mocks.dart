// Mocks generated by Mockito 5.4.5 from annotations
// in tanzaku_todo/test/src/notion/oauth/notion_oauth_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tanzaku_todo/src/common/analytics/analytics_service.dart'
    as _i4;
import 'package:tanzaku_todo/src/notion/oauth/notion_oauth_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NotionOAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotionOAuthService extends _i1.Mock
    implements _i2.NotionOAuthService {
  @override
  _i3.Future<String?> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<String?> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> deleteAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteAccessToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i4.AnalyticsService {
  @override
  _i3.Future<void> logTask(
    String? eventName, {
    bool? hasDueDate,
    bool? isCompleted,
    int? pageSize,
    bool? fromUndo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logTask,
          [eventName],
          {
            #hasDueDate: hasDueDate,
            #isCompleted: isCompleted,
            #pageSize: pageSize,
            #fromUndo: fromUndo,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logScreenView({
    required String? screenName,
    String? screenClass,
    String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [],
          {
            #screenName: screenName,
            #screenClass: screenClass,
            #value: value,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logSettingsChanged({
    required String? settingName,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSettingsChanged,
          [],
          {
            #settingName: settingName,
            #value: value,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logError(
    String? errorName, {
    dynamic error,
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [errorName],
          {
            #error: error,
            #parameters: parameters,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logDatabaseOperation({
    required String? action,
    String? statusType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logDatabaseOperation,
          [],
          {
            #action: action,
            #statusType: statusType,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logCompletedTasksToggle({
    required bool? isVisible,
    required String? screenName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logCompletedTasksToggle,
          [],
          {
            #isVisible: isVisible,
            #screenName: screenName,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logNotionAuth({required String? action}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logNotionAuth,
          [],
          {#action: action},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
